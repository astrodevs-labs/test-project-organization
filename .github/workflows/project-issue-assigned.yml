on:
  issues:
    types: [assigned]


jobs:
  create-branch-and-draft:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Find branch name
        id: find-branch-name
        uses: actions/github-script@v6
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          TITLE: ${{ github.event.issue.title }}
          IS_USER_STORY: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_USER_STORY) }}
          IS_BUG: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_BUG) }}
          IS_TASK: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_TASK) }}
          IS_TECHNICAL_STORY: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_TECHNICAL_STORY) }}
          BRANCH_USER_STORY_PREFIX: ${{ vars.BRANCH_USER_STORY_PREFIX }}
          BRANCH_BUG_PREFIX: ${{ vars.BRANCH_BUG_PREFIX }}
          BRANCH_TECHNICAL_STORY_PREFIX: ${{ vars.BRANCH_TECHNICAL_STORY_PREFIX }}
          PROJECT_TYPE_USER_STORY: ${{ vars.PROJECT_TYPE_USER_STORY }}
          PROJECT_TYPE_BUG: ${{ vars.PROJECT_TYPE_BUG }}
          PROJECT_TYPE_TECHNICAL_STORY: ${{ vars.PROJECT_TYPE_TECHNICAL_STORY }}
        with:
          #github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let branchName = ''
            const isUserStory = JSON.parse(process.env.IS_USER_STORY)
            const isBug = JSON.parse(process.env.IS_BUG)
            const isTask = JSON.parse(process.env.IS_TASK)
            const isTechnicalStory = JSON.parse(process.env.IS_TECHNICAL_STORY)
            const sanitizedTitle = process.env.TITLE.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()

            if (isUserStory && !isTechnicalStory)
              branchName = `${process.env.BRANCH_USER_STORY_PREFIX}/${sanitizedTitle}`
            else if (isBug)
              branchName = `${process.env.BRANCH_BUG_PREFIX}/${sanitizedTitle}`
            else if (isTechnicalStory)
              branchName = `${process.env.BRANCH_TECHNICAL_STORY_PREFIX}/${sanitizedTitle}`

            if (!isTask && (isUserStory || isBug || isTechnicalStory)) {
              console.log(`Branch name: ${branchName}`)
              return { 
                branches: ['dev', branchName.replace(/--/g, '-')]
              }
            }

            const query = `query Nodes($number: Int!, $repo: String!, $organization: String!) {
              organization(login: $organization) {
                repository(name: $repo) {
                  issue(number: $number) {
                    trackedInIssues(first: 1) {
                      nodes {
                        title
                        labels(first: 20) {
                          nodes {
                            name
                          }
                        }
                        trackedInIssues(first: 1) {
                          nodes {
                            title
                            labels(first: 20) {
                              nodes {
                                name
                              }
                            }
                            trackedInIssues(first: 1) {
                              nodes {
                                title
                                labels(first: 20) {
                                  nodes {
                                    name
                                  }
                                }
                                trackedInIssues(first: 1) {
                                  nodes {
                                    title
                                    labels(first: 20) {
                                      nodes {
                                        name
                                      }
                                    }
                                    trackedInIssues(first: 1) {
                                      nodes {
                                        title
                                        labels(first: 20) {
                                          nodes {
                                            name
                                          }
                                        }
                                        trackedInIssues(first: 1) {
                                          nodes {
                                            title
                                            labels(first: 20) {
                                              nodes {
                                                name
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }`

            const variables = {
              number: parseInt(process.env.ISSUE_NUMBER),
              repo: context.repo.repo,
              organization: context.repo.owner
            }

            const result = await github.graphql(query, variables)
            let node = result.organization.repository.issue.trackedInIssues.nodes[0]
            const nodes = [node.title]
            for (; node.trackedInIssues.nodes.length > 0; node = node.trackedInIssues.nodes[0]) {
              console.log(node)
              nodes.push(node.title)
            }
            console.log("end node", node)
            console.log("labels", node.labels.nodes)
            const isRootUserStory = node.labels.nodes.some(label => label.name === process.env.PROJECT_TYPE_USER_STORY)
            const isRootBug = node.labels.nodes.some(label => label.name === process.env.PROJECT_TYPE_BUG)
            const isRootTechnicalStory = node.labels.nodes.some(label => label.name === process.env.PROJECT_TYPE_TECHNICAL_STORY)

            const sanitizedNodes = nodes.map(node => {
              const lowered = node.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase().replace(/--/g, '-')
              return lowered.charAt(0).toUpperCase() + lowered.slice(1)
            })

            let baseBranch = 'dev'
            let prefix = ''

            if (isRootUserStory && !isRootTechnicalStory) {
              prefix = process.env.BRANCH_USER_STORY_PREFIX
            } else if (isRootBug) {
              prefix = process.env.BRANCH_BUG_PREFIX
            } else if (isRootTechnicalStory) {
              prefix = process.env.BRANCH_TECHNICAL_STORY_PREFIX
            }
            
            console.log(`Branch name: ${branchName}`)
            let branches = ['dev']
            for (let i = 0; i < sanitizedNodes.length; i++) {
              branches.push(`${prefix}/${sanitizedNodes.reverse().slice(0, i + 1).join('/')}`)
            }
            branches.push(`${prefix}/${sanitizedNodes.reverse().join('/')}/${sanitizedTitle}`)
            return { branches }
        
      - name: Create branch
        run: |
          echo "test"
          echo "${{ toJson(fromJson(steps.find-branch-name.outputs.result).branches) }}"