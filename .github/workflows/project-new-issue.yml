on:
  issues:
    types: [opened, labeled]

jobs:
  create-project-card:
    # if issue is opened and has label "User Story", "Bug", "Task" or "Technical Story"
    if: github.event.action == 'opened' && (contains(github.event.issue.labels.*.name, 'User Story') || contains(github.event.issue.labels.*.name, 'Bug') || contains(github.event.issue.labels.*.name, 'Task') || contains(github.event.issue.labels.*.name, 'Technical Story'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create project card
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ADMIN_PAT }}
          script: |
            const query = `
              query($organization: String!) {
                organization(login: $organization) {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `
            const variables = {
              organization: context.repo.owner
            }

            const projects = await github.graphql(query, variables)
            const project = projects.organization.projectsV2.nodes.find(project => project.title === 'Project Management')
            if (!project) {
              throw new Error('Project Management project not found')
            }
            console.log(project)

            const createMutation = `
              mutation($input: AddProjectV2ItemByIdInput!) {
                addProjectV2ItemById(input: $input) {
                  item {
                    id
                    fieldValues {
                      nodes {
                        ... on ProjectV2ItemFieldIterationValue {
                          title
                          startDate
                          iterationId
                          duration
                          field {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                          }
                          id
                        }
                        ... on ProjectV2ItemFieldLabelValue {
                          labels(first: $first) {
                            nodes {
                              name
                              id
                            }
                          }
                          field {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                          }
                        }
                        ... on ProjectV2ItemFieldNumberValue {
                          number
                          id
                          field {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                          }
                        }
                        ... on ProjectV2ItemFieldDateValue {
                          id
                          field {
                            ... on ProjectV2Field {
                              name
                            }
                          }
                        }
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                          id
                        }
                      }
                    }
                  }
                }
              }`

            const createVariables = {
              input: {
                projectId: project.id,
                contentId: context.payload.issue.node_id
              }
            }

            const result = await github.graphql(createMutation, createVariables)
            const cardId = result.addProjectV2ItemById.item.id
            const cardFields = result.addProjectV2ItemById.item.fieldValues.nodes
            console.log(cardId, cardFields)

            return {
              cardId: cardId,
              projectId: project.id,
              fields: cardFields
            }
        
      - name: Set status to To describe
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ADMIN_PAT }}
          script: |
            const mutation = `mutation UpdateProjectV2ItemFieldValue($input: UpdateProjectV2ItemFieldValueInput!) {
              updateProjectV2ItemFieldValue(input: $input) {
                
              }
            }`

            const variables = {
              input: {
                id: ${{ steps.create-project-card.outputs.cardId }},
                valueId: "6320a3d5",
                fieldId: "40615192"
              }
            }

      #- name: Translate label to custom field
            
      
