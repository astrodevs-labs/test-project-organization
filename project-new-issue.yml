#on:
#  issues:
#    types: [opened]

#jobs:
#  create-project-card:
#    # if issue is opened and has label "User Story", "Bug", "Task" or "Technical Story"
#    if: github.event.action == 'opened' && (contains(github.event.issue.labels.*.name, 'User Story') || contains(github.event.issue.labels.*.name, 'Bug') || contains(github.event.issue.labels.*.name, 'Task') || contains(github.event.issue.labels.*.name, 'Technical Story'))
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Create project card
#        uses: actions/github-script@v6
#        id: create-project-card
#        env:
#          PROJECT_MANAGEMENT_NAME: ${{ vars.PROJECT_MANAGEMENT_NAME }}
#        with:
#          github-token: ${{ secrets.ADMIN_PAT }}
#          script: |
#            const query = `
#              query($organization: String!) {
#                organization(login: $organization) {
#                  projectsV2(first: 10) {
#                    nodes {
#                      id
#                      title
#                    }
#                  }
#                }
#              }
#            `
#            const variables = {
#              organization: context.repo.owner
#            }
#
#            const projects = await github.graphql(query, variables)
#            console.log(process.env.MANAGEMENT_PROJECT_NAME)
#            const project = projects.organization.projectsV2.nodes.find(project => project.title === process.env.PROJECT_MANAGEMENT_NAME)
#            if (!project) {
#              throw new Error('Project Management project not found')
#            }
#            console.log(project)
#
#            const createMutation = `
#              mutation($input: AddProjectV2ItemByIdInput!) {
#                addProjectV2ItemById(input: $input) {
#                  item {
#                    id
#                    project {
#                      fields(first: 20) {
#                        nodes {
#                          ... on ProjectV2Field {
#                            name
#                            id
#                          }
#                          ... on ProjectV2SingleSelectField {
#                            options {
#                              name
#                              id
#                            }
#                            name
#                            id
#                          }
#                          ... on ProjectV2IterationField {
#                            id
#                            name
#                          }
#                        }
#                      }
#                    }
#                  }
#                }
#              }`
#
#            const createVariables = {
#              input: {
#                projectId: project.id,
#                contentId: context.payload.issue.node_id
#              }
#            }
#
#            const result = await github.graphql(createMutation, createVariables)
#            const cardId = result.addProjectV2ItemById.item.id
#            const cardFields = result.addProjectV2ItemById.item.project.fields.nodes
#
#            const ret = {
#              cardId: cardId,
#              projectId: project.id,
#              fields: cardFields
#            }
#
#            console.log(ret)
#            return ret
#        
#      - name: Set status to To describe
#        uses: actions/github-script@v6
#        env:
#          INFORMATIONS: ${{ steps.create-project-card.outputs.result }}
#          PROJECT_MANAGEMENT_STATUS_START: ${{ vars.PROJECT_MANAGEMENT_STATUS_START }}
#        with:
#          github-token: ${{ secrets.ADMIN_PAT }}
#          script: |
#            const mutation = `mutation($input: UpdateProjectV2ItemFieldValueInput!) {
#              updateProjectV2ItemFieldValue(input: $input) {
#                projectV2Item {
#                  id
#                }
#              }
#            }`
#
#            const informations = JSON.parse(process.env.INFORMATIONS)
#            console.log(informations)
#
#            const statusField = informations.fields.find(field => field.name === 'Status')
#            const toDescribeOption = statusField.options.find(option => option.name === process.env.PROJECT_MANAGEMENT_STATUS_START)
#
#            const variables = {
#              input: {
#                projectId: informations.projectId,
#                itemId: informations.cardId,
#                value: {
#                  singleSelectOptionId: toDescribeOption.id
#                },
#                fieldId: statusField.id
#              }
#            }
#
#            await github.graphql(mutation, variables)
#
#
#      - name: Set type according to label
#        uses: actions/github-script@v6
#        env:
#          INFORMATIONS: ${{ steps.create-project-card.outputs.result }}
#          TYPE: ${{ vars.PROJECT_TYPE_NAME }}
#          USER_STORY: ${{ vars.PROJECT_TYPE_USER_STORY }}
#          BUG: ${{ vars.PROJECT_TYPE_BUG }}
#          TASK: ${{ vars.PROJECT_TYPE_TASK }}
#          TECHNICAL_STORY: ${{ vars.PROJECT_TYPE_TECHNICAL_STORY }}
#          IS_USER_STORY: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_USER_STORY) }}
#          IS_BUG: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_BUG) }}
#          IS_TASK: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_TASK) }}
#          IS_TECHNICAL_STORY: ${{ contains(github.event.issue.labels.*.name, vars.PROJECT_TYPE_TECHNICAL_STORY) }}
#        with:
#          github-token: ${{ secrets.ADMIN_PAT }}
#          script: |
#            const mutation = `mutation($input: UpdateProjectV2ItemFieldValueInput!) {
#              updateProjectV2ItemFieldValue(input: $input) {
#                projectV2Item {
#                  id
#                }
#              }
#            }`
#
#            const informations = JSON.parse(process.env.INFORMATIONS)
#            console.log(typeof informations)
#            console.log(informations)
#            const isUserStory = JSON.parse(process.env.IS_USER_STORY)
#            const isBug = JSON.parse(process.env.IS_BUG)
#            const isTask = JSON.parse(process.env.IS_TASK)
#            const isTechnicalStory = JSON.parse(process.env.IS_TECHNICAL_STORY)
#            let optionToFind = '';
#
#            if (isUserStory && !isTechnicalStory) {
#              optionToFind = process.env.USER_STORY
#            } else if (isTechnicalStory) {
#              optionToFind = process.env.TECHNICAL_STORY
#            } else if (isBug) {
#              optionToFind = process.env.BUG
#            } else if (isTask) {
#              optionToFind = process.env.TASK
#            } 
#
#            const typeField = informations.fields.find(field => field.name === process.env.TYPE)
#            const userStoryOption = typeField.options.find(option => option.name === optionToFind)
#
#            const variables = {
#              input: {
#                projectId: informations.projectId,
#                itemId: informations.cardId,
#                value: {
#                  singleSelectOptionId: userStoryOption.id
#                },
#                fieldId: typeField.id
#              }
#            }
#
#            await github.graphql(mutation, variables)
#
#
#            
#      
#